ㅍimport java.util.*;

class Solution {
    int[] dx = new int[]{1, 0, -1, 0};  // 하, 우, 상, 좌
    int[] dy = new int[]{0, 1, 0, -1};  // 하, 우, 상, 좌
    
    public int solution(int[][] rectangle, int characterX, int characterY, int itemX, int itemY) {

        int[][] map = new int[101][101];  // 맵 크기 설정
        characterX *= 2;  // 두 배로 확장된 좌표
        characterY *= 2;
        itemX *= 2;
        itemY *= 2;

        // 직사각형 테두리를 1로 설정, 내부는 -1로 설정
        for (int[] r : rectangle) {
            r[0] *= 2;
            r[1] *= 2;
            r[2] *= 2;
            r[3] *= 2;

            // 직사각형의 테두리만 1로 설정
            for (int x = r[0]; x <= r[2]; x++) {
                for (int y = r[1]; y <= r[3]; y++) {
                    // 테두리만 1로, 내부는 -1로 설정
                    if (x == r[0] || x == r[2] || y == r[1] || y == r[3]) {
                        if (map[x][y] == -1) continue;  // 이미 내부는 -1로 처리
                        map[x][y] = 1;  // 테두리 부분만 1로 설정
                    } else {
                        map[x][y] = -1;  // 내부 부분은 -1로 처리
                    }
                }
            }
        }

        // BFS를 위한 큐와 방문 배열
        Queue<int[]> queue = new ArrayDeque<>();
        boolean[][] visited = new boolean[101][101];

        // 시작 위치 큐에 추가
        queue.add(new int[]{characterX, characterY, 0});
        visited[characterX][characterY] = true;

        while (!queue.isEmpty()) {
            int[] cur = queue.poll();

            // 목표 지점에 도달하면 거리 반환 (두 배로 확장된 좌표이므로 2로 나눔)
            if (cur[0] == itemX && cur[1] == itemY) {
                return cur[2] / 2;  // 두 배로 확장되었으므로, 최종 거리는 2로 나누어야 함
            }

            // 상, 하, 좌, 우로 이동
            for (int dir = 0; dir < 4; dir++) {
                int nx = cur[0] + dx[dir];
                int ny = cur[1] + dy[dir];

                // 범위 체크
                if (nx < 0 || ny < 0 || nx >= 101 || ny >= 101) continue;

                // 방문 여부 및 벽(내부인 -1) 체크
                if (visited[nx][ny] || map[nx][ny] != 1) continue;

                // 큐에 새 좌표 추가
                queue.add(new int[]{nx, ny, cur[2] + 1});
                visited[nx][ny] = true;
            }
        }

        return -1;  // 목표 지점에 도달할 수 없는 경우
    }
}
