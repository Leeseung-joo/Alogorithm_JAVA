package 백준.Platium;
import java.util.*;
import java.io.*;
public class Main_16930{
    static int n,m,K;
    static char[][]map;
    static int[][] visit;
    static int sx, sy;
    static int ex, ey;
    static int[] dx = {-1, 0, 1, 0};
    static int[] dy = {0, -1, 0, 1};
    static int result;


    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        n = Integer.parseInt(st.nextToken());
        m = Integer.parseInt(st.nextToken());
        K = Integer.parseInt(st.nextToken());
        map = new char[n][m];
        result = -1;
        for(int i = 0; i<n; i++){
            String line = br.readLine();
            for(int j = 0; j< m; j++){
                map[i][j] = line.charAt(j);
            }

        }
        st = new StringTokenizer(br.readLine());
        sx = Integer.parseInt(st.nextToken()) - 1;
        sy = Integer.parseInt(st.nextToken()) - 1;
        ex = Integer.parseInt(st.nextToken()) - 1;
        ey = Integer.parseInt(st.nextToken()) - 1;

        solution();

    }



    public static void solution(){

        Queue<int[]> q = new ArrayDeque<>();
        visit[sx][sx] = 1;
        q.add(new int[]{sx,sy,1});

        while(!q.isEmpty()){
            int[] que = q.poll();
            int move = que[2];

            for (int d = 0; d < dx.length; d++) {
                for (int k = 1; k <= K; k++) {
                    int nx = que[0] + dx[d] * k;
                    int ny = que[1] + dy[d] * k;

                    if (nx < 0 || ny < 0 || nx >= n || ny >= m || map[nx][ny] == '#') break;

         
        if (nx == ex && ny == ey) {
            result = move;
            return;
        }

        if (visit[nx][ny] == 0) {
            visit[nx][ny] = move + 1;
            q.add(new int[]{nx, ny, move + 1});
        }
        else if (visit[nx][ny] == move + 1) continue;
        else break;
    }
}
}


    }
}
