import java.util.*;
import java.io.*;

public class Main {
    static int m, n, k;
    static int[] dx = {0, 1, -1, 0};
    static int[] dy = {1, 0, 0, -1};
    static int[][] array;
    static int cnt;
    static ArrayList<Integer> list;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        m = Integer.parseInt(st.nextToken());
        n = Integer.parseInt(st.nextToken());
        k = Integer.parseInt(st.nextToken());

        array = new int[m][n];
        list = new ArrayList<>();  // ❗ 리스트 초기화는 한 번만!

        // 직사각형 입력받아서 채우기
        for (int i = 0; i < k; i++) {
            st = new StringTokenizer(br.readLine());
            int x1 = Integer.parseInt(st.nextToken());
            int y1 = Integer.parseInt(st.nextToken());
            int x2 = Integer.parseInt(st.nextToken());
            int y2 = Integer.parseInt(st.nextToken());

            // 좌표에 맞게 배열 채우기
            for (int a = y1; a < y2; a++) {
                for (int b = x1; b < x2; b++) {
                    array[a][b] = 1;
                }
            }
        }

        // DFS 탐색 시작
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (array[i][j] == 0) { // 아직 방문 안 한 영역이면
                    cnt = 0;
                    dfs(i, j);
                    list.add(cnt);
                }
            }
        }

        // 결과 정렬 후 출력
        Collections.sort(list);
        System.out.println(list.size()); // 영역 개수 출력
        for (int i = 0; i < list.size(); i++) {
            System.out.print(list.get(i));
            if (i < list.size() - 1) {
                System.out.print(" "); // 마지막 숫자 뒤에는 공백 제거
            }
        }
    }

    public static void dfs(int x, int y) {
        array[x][y] = 1; // 방문 처리
        cnt++; // 현재 영역 크기 증가

        for (int i = 0; i < 4; i++) {
            int nx = x + dx[i];
            int ny = y + dy[i];

            if (nx >= 0 && nx < m && ny >= 0 && ny < n) {
                if (array[nx][ny] == 0) { // ❗ `nx, ny` 위치 검사
                    dfs(nx, ny);
                }
            }
        }
    }
}
