import java.io.BufferedReader;
import java.io.*;
import java.util.*;
public class Main_1520 {
  static int[] dx = new int[]{0,1,0,-1};
  static int[] dy = new int[]{1,0,-1,0};
  static int[][] map;
  static int cnt = 0;
  static int[][] dp;
  static int M,N;

  public static void main(String[] args) throws IOException {
    
    BufferedReader br  = new BufferedReader(new InputStreamReader(System.in));
    BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
    StringTokenizer st = new StringTokenizer(br.readLine());

    M = Integer.parseInt(st.nextToken());
    N = Integer.parseInt(st.nextToken());
    
    map = new int[M][N];
    dp = new int[M][N];

    for (int i = 0; i < M; i++) {
      st = new StringTokenizer(br.readLine());
      for(int j = 0 ; j< N; j++){
          map[i][j] = Integer.parseInt(st.nextToken());
          dp[i][j] = -1; //-1은 아직 방문 전, 방문한 곳은 0 이상으로 표시

      }
    }
    int result = dfs(new Point(0,0));

    bw.write(String.valueOf(result));
    bw.close();

    //dp배열-> 해당 지역까지 올 수 있는 경로의 수!!
    //내리막길로만 가야함
}

static int dfs(Point point){
  int x = point.x;
  int y = point.y;

  if(x == M-1 && y == N-1){
    return 1;
  }
  if(dp[x][y] != -1) return dp[x][y]; //방문했다면 저장된 값을 리턴, 시간을 단축

  dp[x][y] = 0; //방문 안햇으면 0으로 세팅
  for(int i =0; i<4; i++){
    int nx = x + dx[i];
    int ny = y + dy[i];
    
    if(nx < 0 || nx > M-1 || ny < 0 || ny > N-1 || map[x][y] <= map[nx][ny]) continue;

    dp[x][y] += dfs(new Point(nx,ny));

  }
  return dp[x][y];
}
// 0,1



static class Point{
  int x;
  int y;

  public Point(int x, int y){
    this.x = x;
    this.y = y;
  }

}





}
