import java.util.*;

class Solution {
    private static int[] parent;
    
    private static int find(int x){
        // x가 속한 집합의 루트 노드 찾기
        if (parent[x] == x) {
            return x;
        }
        // 경로 압축
        return parent[x] = find(parent[x]);
    }
    
    private static void union(int x, int y){
        int root1 = find(x);
        int root2 = find(y);
        // root2를 root1에 연결
        parent[root2] = root1;
    }
    
    public int solution(int n, int[][] costs) {
        // 비용을 기준으로 다리 오름차순 정렬
        Arrays.sort(costs, (o1, o2) -> Integer.compare(o1[2], o2[2]));
        
        parent = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i; // 각 섬의 루트는 자기 자신
        }
        
        int answer = 0; // 최소 신장 트리의 총 비용
        int edges = 0; // 연결된 다리의 수
        
        for (int[] edge : costs) {
            if (edges == n - 1) { // n-1개의 다리가 연결된 경우 모든 섬이 연결됨
                break;
            }
            // 두 섬이 연결되지 않았다면 연결
            if (find(edge[0]) != find(edge[1])) {
                union(edge[0], edge[1]);
                answer += edge[2]; // 현재 다리의 건설 비용을 총비용에 추가
                edges++;
            }
        }
        
        return answer;
    }
}
