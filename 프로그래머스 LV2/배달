import java.util.*;

class Solution {

    static class Point {
        int dest, cost;

        public Point(int dest, int cost) {
            this.dest = dest;
            this.cost = cost;
        }
    }

    public int solution(int N, int[][] road, int K) {

        ArrayList<Point>[] adjList = new ArrayList[N + 1];
        for (int i = 1; i <= N; i++) {
            adjList[i] = new ArrayList<>();
        }

        for (int[] edge : road) {
            adjList[edge[0]].add(new Point(edge[1], edge[2]));
            adjList[edge[1]].add(new Point(edge[0], edge[2]));
        }

        int[] dist = new int[N + 1];
        Arrays.fill(dist, Integer.MAX_VALUE);
        PriorityQueue<Point> pq = new PriorityQueue<>((o1, o2) -> Integer.compare(o1.cost, o2.cost));
        pq.add(new Point(1, 0));
        dist[1] = 0;

        while (!pq.isEmpty()) {
            Point now = pq.poll();

            if (dist[now.dest] < now.cost) continue;

            for (Point next : adjList[now.dest]) {
                if (dist[next.dest] > now.cost + next.cost) {
                    dist[next.dest] = now.cost + next.cost;
                    pq.add(new Point(next.dest, dist[next.dest]));
                }
            }
        }

        int answer = 0;
        for (int i = 1; i <= N; i++) {
            if (dist[i] <= K) answer++;
        }

        return answer;
    }
}
