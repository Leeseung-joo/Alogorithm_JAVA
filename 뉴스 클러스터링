import java.util.*;

class Solution {
    public int solution(String str1, String str2) {

        ArrayList<String> list = new ArrayList<>();
        ArrayList<String> list1 = new ArrayList<>();

        if(str1.equals("") && str2.equals("")){
            return 65536;
        }

        // 대소문자 구분을 없애기 위해 모두 대문자로 변환
        str1 = str1.toUpperCase();
        str2 = str2.toUpperCase();

        // str1과 str2에서 두 글자씩 슬라이싱하여 리스트에 추가
        for (int i = 0; i < str1.length() - 1; i++) {
            String slice = str1.substring(i, i + 2);
            if (slice.matches("[a-zA-Z]+")) {
                list.add(slice);
                
            
            }
        }
        for (int i = 0; i < str2.length() - 1; i++) {
            String slice = str2.substring(i, i + 2);
            if (slice.matches("[a-zA-Z]+")) {
                list1.add(slice);
            }
        }

        // 교집합과 합집합을 구하는 방법
        ArrayList<String> intersections = new ArrayList<>();
        ArrayList<String> union = new ArrayList<>(list);
        
        union.addAll(list1); //A+B
        
        if (union.isEmpty()) {
            return 65536;
        }

        // 교집합 구하기
        for (String item : list1) {
            if (list.contains(item)) {
                intersections.add(item);
                list.remove(item);  // 교집합에서 제거된 항목은 중복 제거
            }
        }

        // 합집합 구하기 (list와 list1의 모든 원소들)
        
        for (String item : intersections) {
            if (union.contains(item)) {  // A+B - A교B
                union.remove(item);
            }
        }




        // 교집합 크기와 합집합 크기의 비율을 계산
        int size = (int) Math.floor(((double) intersections.size() / union.size()) * 65536);
        return size;
    }
}
