import java.io.*;
import java.util.*;

public class Main_1303 {
    static String[][] map;
    static boolean[][] visited;
    static int[] dx = {1, 0, -1, 0};
    static int[] dy = {0, 1, 0, -1};
    static int m, n;
    static int cnt;

    static class Point {
        int x, y;
        public Point(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st = new StringTokenizer(br.readLine());

        n = Integer.parseInt(st.nextToken());
        m = Integer.parseInt(st.nextToken());
        map = new String[m][n];
        visited = new boolean[m][n];

        for (int i = 0; i < m; i++) {
            String line = br.readLine();
            for (int j = 0; j < n; j++) {
                map[i][j] = String.valueOf(line.charAt(j));
            }
        }

        int whiteCnt = 0;
        int blueCnt = 0;

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (!visited[i][j]) {
                    cnt = 0;
                    dfs(new Point(i, j), map[i][j]);
                    if (map[i][j].equals("W")) {
                        whiteCnt += cnt * cnt;
                    } else if (map[i][j].equals("B")) {
                        blueCnt += cnt * cnt;
                    }
                }
            }
        }

        bw.write(whiteCnt + " " + blueCnt);
        bw.flush();
        bw.close();
    }

    static void dfs(Point p, String flag) {
        int x = p.x;
        int y = p.y;
        cnt++;
        visited[x][y] = true;

        for (int i = 0; i < 4; i++) {
            int nx = x + dx[i];
            int ny = y + dy[i];
            if (nx >= 0 && ny >= 0 && nx < m && ny < n && !visited[nx][ny] && map[nx][ny].equals(flag)) {
                dfs(new Point(nx, ny), flag);
            }
        }
    }
}
